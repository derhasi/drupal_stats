<?php
// $Id$

/**
 * @file
 *  this module provides general api functions to provide an automated stats
 *  tool for other modules, for example to count and store values of a given
 *  database table
 */

/**
 * Calculate one ore more subjects for a given stats type.
 *
 * @param $type
 *  string ID for stats type
 * @param $subjects
 *  a single subject (must not be an array)
 *  or an array of subjects
 * @param $write
 *  indicator, whether to write/store or not
 * @return
 *  recalculated values ($write = FALSE)
 *  or boolean storage success indicator ($write = TRUE)
 */
function stats_calculate($type, $subjects, $write = TRUE) {
  $worker = stats_get_worker($type);
  // One or more subjects
  if (!is_array($subjects)) {
    $subjects = array($subjects);
  }
  foreach ($subjects as $subject) {
    $worker->add_subject($subject);
  }

  // Write or return
  if ($write) {
    return $worker->execute();
  }
  else {
    return $worker->calculate();
  }
}

/**
 * Indicate calculation of a given type for a given subject with special additions.
 */
function stats_calculate_with_additions($type, $subject, $additions, $write = TRUE) {
  $worker = stats_get_worker($type);

  if (!is_array($additions)) {
    $additions = array($additions);
  }
  foreach ($additions as $addition) {
    $worker->add_subject_with_addition($subject, $addition);
  }

  // Write or return
  if ($write) {
    return $worker->execute();
  }
  else {
    return $worker->calculate();
  }
}

/**
 * Recalculate all stats for a given type and either return the results or
 * store them.
 * @param $type
 *  string ID for stats type
 * @param $write
 *  indicator, whether to write/store or not
 * @return
 *  recalculated values ($write = FALSE)
 *  or boolean storage success indicator ($write = TRUE)
 */
function stats_recalculate($type, $write = TRUE) {
  $worker = stats_get_worker($type);
  $worker->add_all();
  if ($write) {
    return $worker->execute();
  }
  else {
    return $worker->calculate();
  }
}

/**
 * Retrieve statistic value for the given type and optionally subject
 * @param $type
 *   type of the stat
 * @param $subject
 *   id of the subject to return value(s) for
 * @return
 *  array of stats value arrays
 */
function stats_load($type, $subjects = NULL) {
  $worker = stats_get_worker($type);

  // recalculate all for no given subject
  if (!isset($subjects)) {
    $worker->add_all();
  }
  else {
    // Single subject
    if (!is_array($subjects)) {
      $worker->add_subject($subjects, $additions);
    }
    else {
      foreach($subjects as $subject) {
        $worker->add_subject($subject);
      }
    }
  }

  return $worker->load();
}

/**
 * Get all stats definitions.
 * @return
 *   Array of type definitions
 */
function stats_info() {
  static $stats_info;
  if (isset($stats_info)) return $stats_info;

  $modules = module_implements('stats_info');
  $stats_info = array();
  foreach ($modules as $module) {
    $invoked = module_invoke($module, 'stats_info');
    foreach ($invoked as $key => $type) {
      // Avoid missing module - stats run tries to include modulename.stats.inc
      if (!isset($type['module'])) {
        $type['module'] = $module;
      }
      // Avoid missing 'type' definition
      if (!isset($type['type'])) {
        $type['type'] = $key;
        $stats_info[$key] = $type;
      }
      else {
        $stats_info[$type['type']] = $type;
      }
    }
  }

  // additional handling for building views data & default values.
  _stats_info_alter($stats_info);
  // Let modules alter type definitions.
  drupal_alter('stats_info', $stats_info);

  return $stats_info;
}

/**
 * Retrieve all defined stats worker.
 */
function stats_worker_info() {
  static $worker_info;

  if (!$worker_info) {
    // Implement interface
    module_load_include('inc', 'stats', 'stats.worker');
    // Get worker info
    $worker_info = module_invoke_all('stats_worker_info');
  }
  return $worker_info;
}

/**
 * Load all necessary files for stats worker to be loaded.
 * @param $handler
 *  string name of the stats_worker class.
 *
 * @return
 *   TRUE if all specified files and handlers could be loaded
 */
function _stats_worker_prepare($handler) {
  $worker_info = stats_worker_info();

  $return = FALSE;
  // Handler was found
  if (isset($worker_info[$handler])) {
    // Load file
    if (isset($worker_info[$handler]['file'])) {
      if (is_file('./'. $worker_info[$handler]['file'])) {
        require_once './'. $worker_info[$handler]['file'];
      }
      else {
        watchdog('stats', '%file could not be loaded for stats_worker %handler.', array('%handler' => $handler, '%file' => $worker_info[$handler]['file']));
        return FALSE;
      }
    }
    // Load parent class
    if (isset($worker_info[$handler]['extends'])) {
      return _stats_worker_prepare($worker_info[$handler]['extends']);
    }

    // Handler found, no parent to be loaded
    return TRUE;
  }
  // No handler found
  return FALSE;
}

/**
 * Return a single stats type sepcification.
 * @param $type
 *   type id
 * @return
 *   stats type info array
 */
function stats_get_type_info($type) {
  $stats_info = stats_info();
  if (isset($stats_info[$type])) {
    return $stats_info[$type];
  }
  return FALSE;
}

/**
 * Get the stats worker object for a given type.
 * @param $type
 *   string of type
 * @return
 *   stats_worker object (in interface stats_worker, e.g. stats_default_worker)
 */
function stats_get_worker($type) {
  $info = stats_get_type_info($type);
  // Check definition
  if (!is_array($info)) {
    watchdog('stats', 'Stats type %type is not defined.', array('%type' => $type), WATCHDOG_ERROR);
    return FALSE;
  }
  // Check active state
  elseif (!$info['active']) {
    watchdog('stats', 'Stats type %type is not activated.', array('%type' => $type), WATCHDOG_WARNING);
    return FALSE;
  }

  // Load type's modulename.stats.inc
  if (isset($info['module'])) {
    module_load_include('inc', $info['module'], $info['module'] .'.stats');
  }
  // Load defined additional file
  if (isset($info['file']) && is_file('./'. $info['file'])) {
    require_once './'. $info['file'];
  }

  // Load stats worker
  if (_stats_worker_prepare($info['handler'])) {
    $worker = new $info['handler']($info);
    return $worker;
  }
  return FALSE;
}

/**
 * Default alteration for adding handler, views data and default values.
 * @param $stats_info
 *  (by reference) array of stats types
 */
function _stats_info_alter(&$stats_info) {
  foreach ($stats_info as $key => $type) {

    // Set default handler and default callbacks
    if (empty($type['handler'])) {
      $type['handler'] = 'stats_default_worker';
    }

    // Set views data, if no is set
    if (!isset($type['views data'])) {
      $table = $type['storage']['table'];
      $col_subject = $type['storage']['subject field'];
      $col_value = $type['storage']['value field'];
      $col_type = $type['storage']['type field'];

      $base_table = $type['subject']['table'];
      $base_field = $type['subject']['field'];

      $type_id = $type['type'];

      // TODO: more generic views data build, that also recognizes existing tables
      // Define table if it is not allready declared.
      if (!$type['storage']['views table declared']) {
        $stats_info[$key]['views data'][$table]['table'] = array(
          'group' => t('Stats'),
        );
      }

      // Relation
      $stats_info[$key]['views data alter'][$base_table]['stats_'. $type_id] = array(
        'real field' => $base_field,
        'title' => t('Stats: @base to @type', array('@base' => $base_table, '@type' => $type_id)),
        'help' => $item['help'],
        'relationship' => array(
          'base' => $table,
          //'field' => $col_subject,
          'relationship field' => $base_field,
          'base field' => $col_subject,
          //'left field' => $base_field,
          'handler' => 'views_handler_relationship',
          'label' => t('Stats: @base to @type', array('@base' => $base_table, '@type' => $type_id)),
          'extra' => array(
            array(
              'field' => $col_type,
              'value' => $type_id,
            ),
          ),
        ),
      );

      // Define field, if it is not allready declared.
      if (!$type['storage']['views field declared']) {
        $stats_info[$key]['views data'][$table][$col_value] = array(
          'title' => t('Stats @stats_type_name value', array('@stats_type_name' => $type['name'])),
          'help' => t('Value stats type @stats_type_name', array('@stats_type_name' => $type['name'])),
          'field' => array(
            'handler' => 'views_handler_field',
            'click sortable' => TRUE,
          ),
          'sort' => array(
            'handler' => 'views_handler_sort',
          ),
          'filter' => array(
            'handler' => 'views_handler_filter_string',
          ),
          'argument' => array(
            'handler' => 'views_handler_argument_string',
          ),
        );
      }
    }
  }
}

/**
 * Implementation of hook_stats_worker_info().
 */
function stats_stats_worker_info() {
  return array(
    'stats_default_worker' => array(
      'file' => drupal_get_path('module', 'stats') .'/stats_default_worker.inc',
    ),
  );
}

/**
 * Helper function for getting the schema specific place hold for the column.
 */
function _stats_column_type_conversion_helper($table, $field) {
  static $conv;
  if (!isset($conv[$table][$field])) {
    $schema = drupal_get_schema($table);
    $conv[$table][$field] = db_type_placeholder($schema['fields'][$field]['type']);
  }
  return $conv[$table][$field];
}
